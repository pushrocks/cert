"use strict";
var plugins = require("./cert.plugins");
var paths = require("./cert.paths");
var Cert = (function () {
    function Cert(optionsArg) {
        this.cfEmail = optionsArg.cfEmail;
        this.cfKey = optionsArg.cfKey;
        this.sslDir = optionsArg.sslDir;
        this.gitOriginRepo = optionsArg.gitOriginRepo;
        var config = {
            cfEmail: this.cfEmail,
            cfKey: this.cfKey
        };
        plugins.smartfile.memory.toFsSync(JSON.stringify(config), plugins.path.join(__dirname, "assets/config.json"));
    }
    ;
    Cert.prototype.getDomainCert = function (domainNameArg, optionsArg) {
        var done = plugins.q.defer();
        if (!checkDomainStillValid(domainNameArg) || optionsArg.force) {
            plugins.shelljs.exec("chmod 700 " + paths.letsencryptSh);
            plugins.shelljs.exec("chmod 700 " + paths.certHook);
            plugins.shelljs.exec("bash -c \"" + paths.letsencryptSh + " -c -d " + domainNameArg + " -t dns-01 -k " + paths.certHook + " -o " + paths.certDir + "\"");
            var fetchedCertsArray = plugins.smartfile.fs.listFoldersSync(paths.certDir);
            if (fetchedCertsArray.indexOf(domainNameArg) != -1) {
                updateSslDir(domainNameArg);
            }
            done.resolve();
        }
        else {
            plugins.beautylog.info("certificate for " + domainNameArg + " is still valid! Not fetching new one!");
            done.resolve();
        }
        return done.promise;
    };
    ;
    return Cert;
}());
exports.Cert = Cert;
var Certificate = (function () {
    function Certificate() {
    }
    ;
    return Certificate;
}());
exports.Certificate = Certificate;
var checkDomainStillValid = function (domainNameArg) {
    return false;
};
var updateSslDir = function (domainNameArg) {
};
var updateGitOrigin = function () {
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,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bmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHBsdWdpbnMgZnJvbSBcIi4vY2VydC5wbHVnaW5zXCI7XG5pbXBvcnQgKiBhcyBwYXRocyBmcm9tIFwiLi9jZXJ0LnBhdGhzXCI7XG5cbmV4cG9ydCBjbGFzcyBDZXJ0IHtcbiAgICBjZkVtYWlsOiBzdHJpbmc7XG4gICAgY2ZLZXk6IHN0cmluZztcbiAgICBzc2xEaXI6IHN0cmluZztcbiAgICBjZXJ0aWZpY2F0ZXNQcmVzZW50OkNlcnRpZmljYXRlW107XG4gICAgY2VydGlmaWNhdGVzVmFsaWQ6Q2VydGlmaWNhdGVbXTtcbiAgICBnaXRPcmlnaW5SZXBvO1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnNBcmc6IHtcbiAgICAgICAgY2ZFbWFpbDogc3RyaW5nLFxuICAgICAgICBjZktleTogc3RyaW5nLFxuICAgICAgICBzc2xEaXI6IHN0cmluZyxcbiAgICAgICAgZ2l0T3JpZ2luUmVwbz86IHN0cmluZ1xuICAgIH0pIHtcbiAgICAgICAgdGhpcy5jZkVtYWlsID0gb3B0aW9uc0FyZy5jZkVtYWlsO1xuICAgICAgICB0aGlzLmNmS2V5ID0gb3B0aW9uc0FyZy5jZktleTtcbiAgICAgICAgdGhpcy5zc2xEaXIgPSBvcHRpb25zQXJnLnNzbERpcjtcbiAgICAgICAgdGhpcy5naXRPcmlnaW5SZXBvID0gb3B0aW9uc0FyZy5naXRPcmlnaW5SZXBvO1xuICAgICAgICBsZXQgY29uZmlnID0ge1xuICAgICAgICAgICAgY2ZFbWFpbDogdGhpcy5jZkVtYWlsLFxuICAgICAgICAgICAgY2ZLZXk6IHRoaXMuY2ZLZXlcbiAgICAgICAgfVxuICAgICAgICBwbHVnaW5zLnNtYXJ0ZmlsZS5tZW1vcnkudG9Gc1N5bmMoSlNPTi5zdHJpbmdpZnkoY29uZmlnKSxwbHVnaW5zLnBhdGguam9pbihfX2Rpcm5hbWUsIFwiYXNzZXRzL2NvbmZpZy5qc29uXCIpKTtcbiAgICB9O1xuICAgIGdldERvbWFpbkNlcnQoZG9tYWluTmFtZUFyZzogc3RyaW5nLG9wdGlvbnNBcmc/Ontmb3JjZTpib29sZWFufSkge1xuICAgICAgICBsZXQgZG9uZSA9IHBsdWdpbnMucS5kZWZlcigpO1xuICAgICAgICBpZiAoIWNoZWNrRG9tYWluU3RpbGxWYWxpZChkb21haW5OYW1lQXJnKSB8fCBvcHRpb25zQXJnLmZvcmNlKSB7XG4gICAgICAgICAgICBwbHVnaW5zLnNoZWxsanMuZXhlYyhcImNobW9kIDcwMCBcIiArIHBhdGhzLmxldHNlbmNyeXB0U2gpO1xuICAgICAgICAgICAgcGx1Z2lucy5zaGVsbGpzLmV4ZWMoXCJjaG1vZCA3MDAgXCIgKyBwYXRocy5jZXJ0SG9vayk7XG4gICAgICAgICAgICBwbHVnaW5zLnNoZWxsanMuZXhlYyhcImJhc2ggLWMgXFxcIlwiICsgcGF0aHMubGV0c2VuY3J5cHRTaCArIFwiIC1jIC1kIFwiICsgZG9tYWluTmFtZUFyZyArIFwiIC10IGRucy0wMSAtayBcIiArIHBhdGhzLmNlcnRIb29rICsgXCIgLW8gXCIgKyBwYXRocy5jZXJ0RGlyICsgXCJcXFwiXCIpO1xuICAgICAgICAgICAgbGV0IGZldGNoZWRDZXJ0c0FycmF5OnN0cmluZ1tdID0gcGx1Z2lucy5zbWFydGZpbGUuZnMubGlzdEZvbGRlcnNTeW5jKHBhdGhzLmNlcnREaXIpO1xuICAgICAgICAgICAgaWYoZmV0Y2hlZENlcnRzQXJyYXkuaW5kZXhPZihkb21haW5OYW1lQXJnKSAhPSAtMSl7XG4gICAgICAgICAgICAgICAgdXBkYXRlU3NsRGlyKGRvbWFpbk5hbWVBcmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZG9uZS5yZXNvbHZlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwbHVnaW5zLmJlYXV0eWxvZy5pbmZvKFwiY2VydGlmaWNhdGUgZm9yIFwiICsgZG9tYWluTmFtZUFyZyArIFwiIGlzIHN0aWxsIHZhbGlkISBOb3QgZmV0Y2hpbmcgbmV3IG9uZSFcIik7XG4gICAgICAgICAgICBkb25lLnJlc29sdmUoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZG9uZS5wcm9taXNlO1xuICAgIH07XG59XG5cbmV4cG9ydCBjbGFzcyBDZXJ0aWZpY2F0ZSB7XG4gICAgZG9tYWluTmFtZTogc3RyaW5nO1xuICAgIGNyZWF0aW9uRGF0ZTogRGF0ZTtcbiAgICBleHBpcnlEYXRlOiBEYXRlO1xuICAgIGNvbnN0cnVjdG9yKCkge1xuXG4gICAgfTtcbn1cblxubGV0IGNoZWNrRG9tYWluU3RpbGxWYWxpZCA9IChkb21haW5OYW1lQXJnOiBzdHJpbmcpOiBib29sZWFuID0+IHtcbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmxldCB1cGRhdGVTc2xEaXIgPSAoZG9tYWluTmFtZUFyZykgPT4ge1xuICAgIFxufVxuXG5sZXQgdXBkYXRlR2l0T3JpZ2luID0gKCkgPT4ge1xuXG59Il19
