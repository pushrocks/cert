"use strict";
var plugins = require("./cert.plugins");
var paths = require("./cert.paths");
var Cert = (function () {
    function Cert(optionsArg) {
        this._cfEmail = optionsArg.cfEmail;
        this._cfKey = optionsArg.cfKey;
        this._sslDir = optionsArg.sslDir;
        this.gitOriginRepo = optionsArg.gitOriginRepo;
        var config = {
            cfEmail: this._cfEmail,
            cfKey: this._cfKey
        };
        plugins.smartfile.memory.toFsSync(JSON.stringify(config), plugins.path.join(__dirname, "assets/config.json"));
    }
    ;
    Cert.prototype.getDomainCert = function (domainNameArg, optionsArg) {
        var done = plugins.q.defer();
        if (!checkDomainsStillValid(domainNameArg) || optionsArg.force) {
            plugins.shelljs.exec("chmod 700 " + paths.letsencryptSh);
            plugins.shelljs.exec("chmod 700 " + paths.certHook);
            plugins.shelljs.exec("bash -c \"" + paths.letsencryptSh + " -c -d " + domainNameArg + " -t dns-01 -k " + paths.certHook + " -o " + paths.certDir + "\"");
            var fetchedCertsArray = plugins.smartfile.fs.listFoldersSync(paths.certDir);
            if (fetchedCertsArray.indexOf(domainNameArg) != -1) {
                updateSslDirSync(this._sslDir, domainNameArg);
            }
            done.resolve();
        }
        else {
            plugins.beautylog.info("certificate for " + domainNameArg + " is still valid! Not fetching new one!");
            done.resolve();
        }
        return done.promise;
    };
    ;
    return Cert;
}());
exports.Cert = Cert;
var Certificate = (function () {
    function Certificate() {
    }
    ;
    return Certificate;
}());
exports.Certificate = Certificate;
var checkDomainsStillValid = function (domainNameArg) {
    return false;
};
var updateSslDirSync = function (sslDirArg, domainNameArg) {
    plugins.smartfile.fs.ensureDirSync(sslDirArg);
    var domainCertFolder = plugins.path.join(paths.certDir, domainNameArg);
    if (plugins.smartfile.fs.listFoldersSync(paths.certDir).indexOf(domainNameArg) != -1) {
        plugins.smartfile.fs.copySync(plugins.path.join(domainCertFolder, "fullchain.pem"), plugins.path.join(sslDirArg, domainNameArg, "fullchain.pem"));
        plugins.smartfile.fs.copySync(plugins.path.join(domainCertFolder, "privkey.pem"), plugins.path.join(sslDirArg, domainNameArg, "privkey.pem"));
        // create cert config
        var certRegex = /.*\-([]0-9]*)\.pem/;
        var certFileNameWithTime = plugins.smartfile.fs.listFilesSync(domainCertFolder, certRegex)[1];
        var certTime = parseInt(certRegex.exec(certFileNameWithTime)[1]);
        var certConfig = {
            domainName: domainNameArg,
            created: certTime,
            expires: certTime + 7776000
        };
        plugins.smartfile.memory.toFs(JSON.stringify(certConfig), plugins.path.join(sslDirArg, domainNameArg, "config.json"));
    }
    ;
};
var updateGitOrigin = function () {
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,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LEVBQUUsUUFBUTtZQUNqQixPQUFPLEVBQUUsUUFBUSxHQUFHLE9BQU87U0FDOUIsQ0FBQztRQUNGLE9BQU8sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDekIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsRUFDMUIsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFDLGFBQWEsRUFBQyxhQUFhLENBQUMsQ0FDM0QsQ0FBQztJQUNOLENBQUM7SUFBQSxDQUFDO0FBQ04sQ0FBQyxDQUFBO0FBRUQsSUFBSSxlQUFlLEdBQUc7QUFFdEIsQ0FBQyxDQUFBIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcGx1Z2lucyBmcm9tIFwiLi9jZXJ0LnBsdWdpbnNcIjtcbmltcG9ydCAqIGFzIHBhdGhzIGZyb20gXCIuL2NlcnQucGF0aHNcIjtcblxuZXhwb3J0IGNsYXNzIENlcnQge1xuICAgIHByaXZhdGUgX2NmRW1haWw6IHN0cmluZztcbiAgICBwcml2YXRlIF9jZktleTogc3RyaW5nO1xuICAgIHByaXZhdGUgX3NzbERpcjogc3RyaW5nO1xuICAgIGNlcnRpZmljYXRlc1ByZXNlbnQ6Q2VydGlmaWNhdGVbXTtcbiAgICBjZXJ0aWZpY2F0ZXNWYWxpZDpDZXJ0aWZpY2F0ZVtdO1xuICAgIGdpdE9yaWdpblJlcG87XG4gICAgY29uc3RydWN0b3Iob3B0aW9uc0FyZzoge1xuICAgICAgICBjZkVtYWlsOiBzdHJpbmcsXG4gICAgICAgIGNmS2V5OiBzdHJpbmcsXG4gICAgICAgIHNzbERpcjogc3RyaW5nLFxuICAgICAgICBnaXRPcmlnaW5SZXBvPzogc3RyaW5nXG4gICAgfSkge1xuICAgICAgICB0aGlzLl9jZkVtYWlsID0gb3B0aW9uc0FyZy5jZkVtYWlsO1xuICAgICAgICB0aGlzLl9jZktleSA9IG9wdGlvbnNBcmcuY2ZLZXk7XG4gICAgICAgIHRoaXMuX3NzbERpciA9IG9wdGlvbnNBcmcuc3NsRGlyO1xuICAgICAgICB0aGlzLmdpdE9yaWdpblJlcG8gPSBvcHRpb25zQXJnLmdpdE9yaWdpblJlcG87XG4gICAgICAgIGxldCBjb25maWcgPSB7XG4gICAgICAgICAgICBjZkVtYWlsOiB0aGlzLl9jZkVtYWlsLFxuICAgICAgICAgICAgY2ZLZXk6IHRoaXMuX2NmS2V5XG4gICAgICAgIH1cbiAgICAgICAgcGx1Z2lucy5zbWFydGZpbGUubWVtb3J5LnRvRnNTeW5jKEpTT04uc3RyaW5naWZ5KGNvbmZpZykscGx1Z2lucy5wYXRoLmpvaW4oX19kaXJuYW1lLCBcImFzc2V0cy9jb25maWcuanNvblwiKSk7XG4gICAgfTtcbiAgICBnZXREb21haW5DZXJ0KGRvbWFpbk5hbWVBcmc6IHN0cmluZyxvcHRpb25zQXJnPzp7Zm9yY2U6Ym9vbGVhbn0pIHtcbiAgICAgICAgbGV0IGRvbmUgPSBwbHVnaW5zLnEuZGVmZXIoKTtcbiAgICAgICAgaWYgKCFjaGVja0RvbWFpbnNTdGlsbFZhbGlkKGRvbWFpbk5hbWVBcmcpIHx8IG9wdGlvbnNBcmcuZm9yY2UpIHtcbiAgICAgICAgICAgIHBsdWdpbnMuc2hlbGxqcy5leGVjKFwiY2htb2QgNzAwIFwiICsgcGF0aHMubGV0c2VuY3J5cHRTaCk7XG4gICAgICAgICAgICBwbHVnaW5zLnNoZWxsanMuZXhlYyhcImNobW9kIDcwMCBcIiArIHBhdGhzLmNlcnRIb29rKTtcbiAgICAgICAgICAgIHBsdWdpbnMuc2hlbGxqcy5leGVjKFwiYmFzaCAtYyBcXFwiXCIgKyBwYXRocy5sZXRzZW5jcnlwdFNoICsgXCIgLWMgLWQgXCIgKyBkb21haW5OYW1lQXJnICsgXCIgLXQgZG5zLTAxIC1rIFwiICsgcGF0aHMuY2VydEhvb2sgKyBcIiAtbyBcIiArIHBhdGhzLmNlcnREaXIgKyBcIlxcXCJcIik7XG4gICAgICAgICAgICBsZXQgZmV0Y2hlZENlcnRzQXJyYXk6c3RyaW5nW10gPSBwbHVnaW5zLnNtYXJ0ZmlsZS5mcy5saXN0Rm9sZGVyc1N5bmMocGF0aHMuY2VydERpcik7XG4gICAgICAgICAgICBpZihmZXRjaGVkQ2VydHNBcnJheS5pbmRleE9mKGRvbWFpbk5hbWVBcmcpICE9IC0xKXtcbiAgICAgICAgICAgICAgICB1cGRhdGVTc2xEaXJTeW5jKHRoaXMuX3NzbERpcixkb21haW5OYW1lQXJnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRvbmUucmVzb2x2ZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGx1Z2lucy5iZWF1dHlsb2cuaW5mbyhcImNlcnRpZmljYXRlIGZvciBcIiArIGRvbWFpbk5hbWVBcmcgKyBcIiBpcyBzdGlsbCB2YWxpZCEgTm90IGZldGNoaW5nIG5ldyBvbmUhXCIpO1xuICAgICAgICAgICAgZG9uZS5yZXNvbHZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRvbmUucHJvbWlzZTtcbiAgICB9O1xufVxuXG5leHBvcnQgY2xhc3MgQ2VydGlmaWNhdGUge1xuICAgIGRvbWFpbk5hbWU6IHN0cmluZztcbiAgICBjcmVhdGlvbkRhdGU6IERhdGU7XG4gICAgZXhwaXJ5RGF0ZTogRGF0ZTtcbiAgICBjb25zdHJ1Y3RvcigpIHtcblxuICAgIH07XG59XG5cbmludGVyZmFjZSBjZXJ0Q29uZmlnIHtcbiAgICBkb21haW5OYW1lOnN0cmluZztcbiAgICBjcmVhdGVkOm51bWJlcjtcbiAgICBleHBpcmVzOm51bWJlcjtcbn1cblxubGV0IGNoZWNrRG9tYWluc1N0aWxsVmFsaWQgPSAoZG9tYWluTmFtZUFyZzogc3RyaW5nKTogYm9vbGVhbiA9PiB7XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5sZXQgdXBkYXRlU3NsRGlyU3luYyA9IChzc2xEaXJBcmc6c3RyaW5nLGRvbWFpbk5hbWVBcmc6c3RyaW5nKSA9PiB7XG4gICAgcGx1Z2lucy5zbWFydGZpbGUuZnMuZW5zdXJlRGlyU3luYyhzc2xEaXJBcmcpO1xuICAgIGxldCBkb21haW5DZXJ0Rm9sZGVyID0gcGx1Z2lucy5wYXRoLmpvaW4ocGF0aHMuY2VydERpcixkb21haW5OYW1lQXJnKVxuICAgIGlmKHBsdWdpbnMuc21hcnRmaWxlLmZzLmxpc3RGb2xkZXJzU3luYyhwYXRocy5jZXJ0RGlyKS5pbmRleE9mKGRvbWFpbk5hbWVBcmcpICE9IC0xKSB7XG4gICAgICAgIHBsdWdpbnMuc21hcnRmaWxlLmZzLmNvcHlTeW5jKFxuICAgICAgICAgICAgcGx1Z2lucy5wYXRoLmpvaW4oZG9tYWluQ2VydEZvbGRlcixcImZ1bGxjaGFpbi5wZW1cIiksXG4gICAgICAgICAgICBwbHVnaW5zLnBhdGguam9pbihzc2xEaXJBcmcsZG9tYWluTmFtZUFyZyxcImZ1bGxjaGFpbi5wZW1cIilcbiAgICAgICAgKTtcbiAgICAgICAgcGx1Z2lucy5zbWFydGZpbGUuZnMuY29weVN5bmMoXG4gICAgICAgICAgICBwbHVnaW5zLnBhdGguam9pbihkb21haW5DZXJ0Rm9sZGVyLFwicHJpdmtleS5wZW1cIiksXG4gICAgICAgICAgICBwbHVnaW5zLnBhdGguam9pbihzc2xEaXJBcmcsZG9tYWluTmFtZUFyZyxcInByaXZrZXkucGVtXCIpXG4gICAgICAgICk7XG4gICAgICAgIC8vIGNyZWF0ZSBjZXJ0IGNvbmZpZ1xuICAgICAgICBsZXQgY2VydFJlZ2V4ID0gLy4qXFwtKFtdMC05XSopXFwucGVtLztcbiAgICAgICAgbGV0IGNlcnRGaWxlTmFtZVdpdGhUaW1lID0gcGx1Z2lucy5zbWFydGZpbGUuZnMubGlzdEZpbGVzU3luYyhkb21haW5DZXJ0Rm9sZGVyLGNlcnRSZWdleClbMV07XG4gICAgICAgIGxldCBjZXJ0VGltZSA9IHBhcnNlSW50KGNlcnRSZWdleC5leGVjKGNlcnRGaWxlTmFtZVdpdGhUaW1lKVsxXSk7XG4gICAgICAgIGxldCBjZXJ0Q29uZmlnOmNlcnRDb25maWcgPSB7XG4gICAgICAgICAgICBkb21haW5OYW1lOiBkb21haW5OYW1lQXJnLFxuICAgICAgICAgICAgY3JlYXRlZDogY2VydFRpbWUsXG4gICAgICAgICAgICBleHBpcmVzOiBjZXJ0VGltZSArIDc3NzYwMDBcbiAgICAgICAgfTtcbiAgICAgICAgcGx1Z2lucy5zbWFydGZpbGUubWVtb3J5LnRvRnMoXG4gICAgICAgICAgICBKU09OLnN0cmluZ2lmeShjZXJ0Q29uZmlnKSxcbiAgICAgICAgICAgIHBsdWdpbnMucGF0aC5qb2luKHNzbERpckFyZyxkb21haW5OYW1lQXJnLFwiY29uZmlnLmpzb25cIilcbiAgICAgICAgKTtcbiAgICB9O1xufVxuXG5sZXQgdXBkYXRlR2l0T3JpZ2luID0gKCkgPT4ge1xuXG59Il19
