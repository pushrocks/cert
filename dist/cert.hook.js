#!/usr/bin/env node
"use strict";
require("typings-global");
var plugins = require("./cert.plugins");
var paths = require("./cert.paths");
var smartcli = new plugins.smartcli.Smartcli();
var config = plugins.smartfile.fs.toObjectSync(paths.config);
var cflare = new plugins.cflare.CflareAccount();
cflare.auth({
    email: config.cfEmail,
    key: config.cfKey
});
var setChallenge = function (domainNameArg, challengeArg) {
    var done = plugins.q.defer();
    plugins.beautylog.log("setting challenge for " + domainNameArg);
    cflare.createRecord(prefixName(domainNameArg), "TXT", challengeArg).then(function () {
        plugins.beautylog.ok("Challenge has been set!");
        plugins.beautylog.info("We need to cool down to let DNS propagate to edge locations!");
        cooldown().then(function () {
            done.resolve();
        });
    });
    return done.promise;
};
var cleanChallenge = function (domainNameArg) {
    var done = plugins.q.defer();
    plugins.beautylog.log("cleaning challenge for " + domainNameArg);
    cflare.removeRecord(prefixName(domainNameArg), "TXT");
    return done.promise;
};
var cooldown = function () {
    var done = plugins.q.defer();
    var cooldowntime = 40000;
    var passedTime = 0;
    plugins.beautylog.log("Cooling down! " + (cooldowntime / 1000).toString() + " seconds left");
    var coolDownCounter = function () {
        setTimeout(function () {
            if (cooldowntime <= passedTime) {
                plugins.beautylog.ok("Cooled down!");
                done.resolve();
            }
            else {
                passedTime = passedTime + 5000;
                plugins.beautylog.log("Cooling down! " + ((cooldowntime - passedTime) / 1000).toString() + " seconds left");
                coolDownCounter();
            }
        }, 5000);
    };
    coolDownCounter();
    return done.promise;
};
var prefixName = function (domainNameArg) {
    return "_acme-challenge." + domainNameArg;
};
smartcli.addCommand({
    commandName: "deploy_challenge"
}).then(function (argv) {
    setChallenge(argv._[1], argv._[3]);
});
smartcli.addCommand({
    commandName: "clean_challenge"
}).then(function (argv) {
    cleanChallenge(argv._[1]);
});
smartcli.startParse();

//# sourceMappingURL=data:application/json;charset=utf8;base64,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RyxVQUFVLENBQUMsR0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLEVBQUUsR0FBRyxlQUFlLENBQUMsQ0FBQztnQkFDMUcsZUFBZSxFQUFFLENBQUM7WUFDdEIsQ0FBQztRQUNMLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNiLENBQUMsQ0FBQTtJQUNELGVBQWUsRUFBRSxDQUFDO0lBQ2xCLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO0FBQ3hCLENBQUMsQ0FBQTtBQUVELElBQUksVUFBVSxHQUFHLFVBQUMsYUFBcUI7SUFDbkMsTUFBTSxDQUFDLGtCQUFrQixHQUFHLGFBQWEsQ0FBQztBQUM5QyxDQUFDLENBQUE7QUFFRCxRQUFRLENBQUMsVUFBVSxDQUFDO0lBQ2hCLFdBQVcsRUFBRSxrQkFBa0I7Q0FDbEMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFDLElBQUk7SUFDVCxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdkMsQ0FBQyxDQUFDLENBQUM7QUFFSCxRQUFRLENBQUMsVUFBVSxDQUFDO0lBQ2hCLFdBQVcsRUFBRSxpQkFBaUI7Q0FDakMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFDLElBQUk7SUFDVCxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzlCLENBQUMsQ0FBQyxDQUFDO0FBRUgsUUFBUSxDQUFDLFVBQVUsRUFBRSxDQUFDIiwiZmlsZSI6ImNlcnQuaG9vay5qcyIsInNvdXJjZXNDb250ZW50IjpbIiMhL3Vzci9iaW4vZW52IG5vZGVcbi8vIHRoZSBzaGViYW5nIGxpbmUgYWJvdmUgbWFrZXMgc3VyZSB0aGlzIHNjcmlwdCB3aWxsIGdldCBpbnRlcnByZXRlZCBieSBub2RlXG5cbmltcG9ydCBcInR5cGluZ3MtZ2xvYmFsXCI7XG5pbXBvcnQgKiBhcyBwbHVnaW5zIGZyb20gXCIuL2NlcnQucGx1Z2luc1wiO1xuaW1wb3J0ICogYXMgcGF0aHMgZnJvbSBcIi4vY2VydC5wYXRoc1wiO1xuXG5sZXQgc21hcnRjbGkgPSBuZXcgcGx1Z2lucy5zbWFydGNsaS5TbWFydGNsaSgpO1xuXG5sZXQgY29uZmlnID0gcGx1Z2lucy5zbWFydGZpbGUuZnMudG9PYmplY3RTeW5jKHBhdGhzLmNvbmZpZyk7XG5sZXQgY2ZsYXJlID0gbmV3IHBsdWdpbnMuY2ZsYXJlLkNmbGFyZUFjY291bnQoKTtcbmNmbGFyZS5hdXRoKHtcbiAgICBlbWFpbDogY29uZmlnLmNmRW1haWwsXG4gICAga2V5OiBjb25maWcuY2ZLZXlcbn0pO1xuXG5sZXQgc2V0Q2hhbGxlbmdlID0gKGRvbWFpbk5hbWVBcmc6IHN0cmluZywgY2hhbGxlbmdlQXJnOiBzdHJpbmcpID0+IHtcbiAgICBsZXQgZG9uZSA9IHBsdWdpbnMucS5kZWZlcigpO1xuICAgIHBsdWdpbnMuYmVhdXR5bG9nLmxvZyhcInNldHRpbmcgY2hhbGxlbmdlIGZvciBcIiArIGRvbWFpbk5hbWVBcmcpO1xuICAgIGNmbGFyZS5jcmVhdGVSZWNvcmQocHJlZml4TmFtZShkb21haW5OYW1lQXJnKSwgXCJUWFRcIiwgY2hhbGxlbmdlQXJnKS50aGVuKCgpID0+IHtcbiAgICAgICAgcGx1Z2lucy5iZWF1dHlsb2cub2soXCJDaGFsbGVuZ2UgaGFzIGJlZW4gc2V0IVwiKTtcbiAgICAgICAgcGx1Z2lucy5iZWF1dHlsb2cuaW5mbyhcIldlIG5lZWQgdG8gY29vbCBkb3duIHRvIGxldCBETlMgcHJvcGFnYXRlIHRvIGVkZ2UgbG9jYXRpb25zIVwiKTtcbiAgICAgICAgY29vbGRvd24oKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIGRvbmUucmVzb2x2ZSgpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gZG9uZS5wcm9taXNlO1xufVxuXG5sZXQgY2xlYW5DaGFsbGVuZ2UgPSAoZG9tYWluTmFtZUFyZykgPT4ge1xuICAgIGxldCBkb25lID0gcGx1Z2lucy5xLmRlZmVyKCk7XG4gICAgcGx1Z2lucy5iZWF1dHlsb2cubG9nKFwiY2xlYW5pbmcgY2hhbGxlbmdlIGZvciBcIiArIGRvbWFpbk5hbWVBcmcpO1xuICAgIGNmbGFyZS5yZW1vdmVSZWNvcmQocHJlZml4TmFtZShkb21haW5OYW1lQXJnKSwgXCJUWFRcIik7XG4gICAgcmV0dXJuIGRvbmUucHJvbWlzZTtcbn1cblxubGV0IGNvb2xkb3duID0gKCkgPT4ge1xuICAgIGxldCBkb25lID0gcGx1Z2lucy5xLmRlZmVyKCk7XG4gICAgbGV0IGNvb2xkb3dudGltZSA9IDQwMDAwO1xuICAgIGxldCBwYXNzZWRUaW1lID0gMDtcbiAgICBwbHVnaW5zLmJlYXV0eWxvZy5sb2coXCJDb29saW5nIGRvd24hIFwiICsgKGNvb2xkb3dudGltZS8xMDAwKS50b1N0cmluZygpICsgXCIgc2Vjb25kcyBsZWZ0XCIpO1xuICAgIGxldCBjb29sRG93bkNvdW50ZXIgPSAoKSA9PiB7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgaWYoY29vbGRvd250aW1lIDw9IHBhc3NlZFRpbWUpe1xuICAgICAgICAgICAgICAgIHBsdWdpbnMuYmVhdXR5bG9nLm9rKFwiQ29vbGVkIGRvd24hXCIpO1xuICAgICAgICAgICAgICAgIGRvbmUucmVzb2x2ZSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwYXNzZWRUaW1lID0gcGFzc2VkVGltZSArIDUwMDA7XG4gICAgICAgICAgICAgICAgcGx1Z2lucy5iZWF1dHlsb2cubG9nKFwiQ29vbGluZyBkb3duISBcIiArICgoY29vbGRvd250aW1lIC0gcGFzc2VkVGltZSkvMTAwMCkudG9TdHJpbmcoKSArIFwiIHNlY29uZHMgbGVmdFwiKTtcbiAgICAgICAgICAgICAgICBjb29sRG93bkNvdW50ZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgNTAwMCk7XG4gICAgfVxuICAgIGNvb2xEb3duQ291bnRlcigpO1xuICAgIHJldHVybiBkb25lLnByb21pc2U7XG59XG5cbmxldCBwcmVmaXhOYW1lID0gKGRvbWFpbk5hbWVBcmc6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gICAgcmV0dXJuIFwiX2FjbWUtY2hhbGxlbmdlLlwiICsgZG9tYWluTmFtZUFyZztcbn1cblxuc21hcnRjbGkuYWRkQ29tbWFuZCh7XG4gICAgY29tbWFuZE5hbWU6IFwiZGVwbG95X2NoYWxsZW5nZVwiXG59KS50aGVuKChhcmd2KSA9PiB7XG4gICAgc2V0Q2hhbGxlbmdlKGFyZ3YuX1sxXSwgYXJndi5fWzNdKTtcbn0pO1xuXG5zbWFydGNsaS5hZGRDb21tYW5kKHtcbiAgICBjb21tYW5kTmFtZTogXCJjbGVhbl9jaGFsbGVuZ2VcIlxufSkudGhlbigoYXJndikgPT4ge1xuICAgIGNsZWFuQ2hhbGxlbmdlKGFyZ3YuX1sxXSk7XG59KTtcblxuc21hcnRjbGkuc3RhcnRQYXJzZSgpO1xuIl19
